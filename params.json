{
  "name": "Weblinkjs",
  "tagline": "An abstraction built around building, deploying, and invoking Javascript through custom buttons/links (weblinks) in Salesforce",
  "body": "# weblinkjs\r\n\r\nAn abstraction built around building, deploying, and invoking Javascript\r\nthrough custom buttons/links (weblinks) in Salesforce. Including an added\r\nbenefit of developing using ES6 Javascript (with Babel).\r\n\r\nThe project may be used as a template for centralizing an org's custom weblink\r\njavascript. Either fork this repository through Github, or clone and push to\r\nyour own public/private remote.\r\n\r\n\r\n## Usage\r\n\r\nBy convention, code for each weblink is defined inside a javascript module;\r\ni.e. `src/modules/<SObjectType>/<Weblink API Name>.js`. However, this is not\r\nenforced, so you may adapt with your own naming conventions as long as the\r\nmodules reside in `src/modules/`.\r\n\r\nSince these are self-contained modules, code stored on the weblink itself\r\nis fairly minimal:\r\n\r\n```javascript\r\n{!REQUIRESCRIPT('/resource/weblinkjs/weblinks.js')}\r\n\r\nweblinks.invoke('Account/My_Custom_Weblink');\r\n```\r\n\r\nWhereas its module would implement the logic:\r\n\r\n```javascript\r\n// src/modules/Account/My_Custom_Weblink.js\r\nexport function exec(params) {\r\n  alert('hello world!');\r\n};\r\n```\r\n\r\n\r\n### Parameters\r\n\r\nOne minor drawback of moving code to static resources is that merge fields\r\ncannot be parsed. To get around this limitation, you can pass them as named\r\nparameters for the module to parse.\r\n\r\n```javascript\r\n{!REQUIRESCRIPT('/resource/weblinkjs')}\r\n'use strict';\r\n\r\nweblinks.invoke('Account/My_Custom_Weblink', {\r\n  sessionId: '{!API.Session_ID}',\r\n  id: '{!Work_Order__c.Id}'\r\n});\r\n```\r\n\r\nBe aware that other than the record's Id, most values **cannot** be relied on\r\nto be up-to-date. Merge fields are only evaluated once; i.e. the moment before\r\nthe page is loaded.\r\n\r\nOne potentially common scenario where this would be problematic occurs when one\r\nuser (Bob) opens a record's detail page, then a few moments later, the same\r\nuser (or some other, doesn't matter) makes some field update that would result\r\nin the value differing from the value it was the moment before the page was\r\ninitially loaded by Bob. In this scenario, if Bob then clicks a javascript\r\nbutton using merge fields, the data he'd be using will now be out-of-date.\r\n\r\nA solution to the above scenario is to only pass the record's Id, and use\r\nAjax to query the record every time the button is clicked (using Salesforce's\r\n`connection.js` or [`jsforce`](https://jsforce.github.io) via CDN). Note that\r\nthis has a downside of its own, which is that it counts against the limit of\r\nAPI calls your org can make in a single day.\r\n\r\n\r\n## Development\r\n\r\nRequirements:\r\n\r\n- [Node.js](https://nodejs.org/en/)\r\n- [Git](https://git-scm.com/)\r\n- Some kind of shell prompt\r\n  - Good options for Windows are [Cygwin](https://www.cygwin.com/) or Git BASH\r\n    (included in the Windows Git installation).\r\n\r\nLaunch a Bash-like shell, clone the repo to where your projects live, then install:\r\n\r\n```bash\r\ncd ~/Projects\r\ngit clone ssh://git@stash.ecoact.org:7999/eo/weblinkjs.git && cd weblinkjs\r\nnpm install\r\n```\r\n\r\nNow you may either edit one of the existing modules, located in `/src/modules`,\r\nor create a new one.\r\n\r\nTo create a module for a weblink, create a Javascript file named\r\n`/src/modules/<SObjectType>/<Weblink API Name>.js`. If the directory doesn't\r\nalready exist for the SObjectType, create it first.\r\n\r\nExample template:\r\n\r\n```javascript\r\nexport const dependencies = [\r\n  '//mycdn.com/path/to/cdn/resource'\r\n];\r\nexport function exec(params) {\r\n  // ... your weblink code goes here, parsing params as you see fit ...\r\n};\r\n```\r\n\r\n**Remember** to also add code for invoking the module in the weblink itself,\r\nas shown in the Usage section above.\r\n\r\nOnce you're done making changes modules, build the library:\r\n\r\n```bash\r\nnpm run build\r\n```\r\n\r\nThen deploy using your Salesforce credentials:\r\n\r\n```bash\r\nnpm run deploy -- -u <username> -p <password> -t <security token> -l https://test.salesforce.com\r\n```\r\n\r\nTo save time, you could build and deploy at the same time:\r\n\r\n```bash\r\nnpm run build && npm run deploy -- -u <username> -p <password> -t <security token> -l https://test.salesforce.com\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}